package cn.jzteam.algorithm.leetcode.question0036;

import com.alibaba.fastjson.JSON;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 *
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 *
 *
 * 上图是一个部分填充的有效的数独。
 *
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 *
 * 示例 1:
 *
 * 输入:
 * [
 *   ["5","3",".",".","7",".",".",".","."],
 *   ["6",".",".","1","9","5",".",".","."],
 *   [".","9","8",".",".",".",".","6","."],
 *   ["8",".",".",".","6",".",".",".","3"],
 *   ["4",".",".","8",".","3",".",".","1"],
 *   ["7",".",".",".","2",".",".",".","6"],
 *   [".","6",".",".",".",".","2","8","."],
 *   [".",".",".","4","1","9",".",".","5"],
 *   [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: true
 * 示例 2:
 *
 * 输入:
 * [
 *   ["8","3",".",".","7",".",".",".","."],
 *   ["6",".",".","1","9","5",".",".","."],
 *   [".","9","8",".",".",".",".","6","."],
 *   ["8",".",".",".","6",".",".",".","3"],
 *   ["4",".",".","8",".","3",".",".","1"],
 *   ["7",".",".",".","2",".",".",".","6"],
 *   [".","6",".",".",".",".","2","8","."],
 *   [".",".",".","4","1","9",".",".","5"],
 *   [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: false
 * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 *      但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 * 说明:
 *
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 给定数独序列只包含数字 1-9 和字符 '.' 。
 * 给定数独永远是 9x9 形式的。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/valid-sudoku
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class Solution {

    /*
        效率：5%速度，100%内存
        一次循环判断有效数独
        重点是如果3X3子数独唯一
        遍历二维数组，得到i,j，通过 box_sub_index = (i/3)*3 + j/3，就能给9个3X3的子数独编号 0-8了。
     */
    public static boolean isValidSudoku(char[][] board) {
        Map<String, Set<Character>> mapSet = new HashMap<>();
        // 9X9的数独
        for (int i = 0; i<9; i++) {
            // 是否行内重复
            Set<Character> rs = mapSet.get("R" + i);
            if (rs == null) {
                rs = new HashSet<>();
                mapSet.put("R"+i, rs);
            }
            for (int j=0; j<9; j++) {
                if (board[i][j] == '.') {
                    continue;
                }
                if (rs.contains(board[i][j])){
                    return false;
                }
                rs.add(board[i][j]);

                // 是否列内重复
                Set<Character> cs = mapSet.get("C" + j);
                if (cs == null) {
                    cs = new HashSet<>();
                    mapSet.put("C"+j, cs);
                } else if (cs.contains(board[i][j])){
                    return false;
                }
                cs.add(board[i][j]);

                // 是否子数独内重复
                int box_sub_index = (i/3)*3 + j/3;
                Set<Character> ss = mapSet.get("S" + box_sub_index);
                if (ss == null) {
                    ss = new HashSet<>();
                    mapSet.put("S"+box_sub_index, ss);
                } else if (ss.contains(board[i][j])){
                    return false;
                }
                ss.add(board[i][j]);
            }
        }
        return true;
    }

    public static boolean isValidSudoku1(char[][] board) {
        // 改成使用数组: 一维索引表示编号，二维索引表示数值，元素1表示已存在此值
        int[][] rows = new int[9][9];
        int[][] cols = new int[9][9];
        int[][] subs = new int[9][9];
        int value; // 栈内存放，避免去堆中取
        // 9X9的数独
        for (int i = 0; i<9; i++) {
            for (int j=0; j<9; j++) {
                value = board[i][j] - 49;
                // 过滤掉'.'，其对应int值是46
                if (value == -3) {
                    continue;
                }
                // 是否行内重复
                if (rows[i][value] == 1){
                    return false;
                }
                rows[i][value] = 1;

                // 是否列内重复
                if (cols[j][value] == 1){
                    return false;
                }
                cols[j][value] = 1;

                // 是否子数独内重复
                int box_sub_index = (i/3)*3 + j/3;
                if (subs[box_sub_index][value] == 1){
                    return false;
                }
                subs[box_sub_index][value] = 1;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        System.out.println((int)'0');
        System.out.println((int)'1');
        System.out.println((int)'2');
        System.out.println((int)'9');
        System.out.println((int)'.' - 49);
        char[][] board = {
                {'5','3','.','.','7','.','.','.','.'},
                {'6','.','.','1','9','5','.','.','.'},
                {'.','9','8','.','.','.','.','6','.'},
                {'8','.','.','.','6','.','.','.','3'},
                {'4','.','.','8','.','3','.','.','1'},
                {'7','.','.','.','2','.','.','.','6'},
                {'.','6','.','.','.','.','2','8','.'},
                {'.','.','.','4','1','9','.','.','5'},
                {'.','.','.','.','8','.','.','7','9'}
        };
        System.out.println(isValidSudoku1(board));

        char[][] b = {
            {'8','3','.','.','7','.','.','.','.'},
            {'6','.','.','1','9','5','.','.','.'},
            {'.','9','8','.','.','.','.','6','.'},
            {'8','.','.','.','6','.','.','.','3'},
            {'4','.','.','8','.','3','.','.','1'},
            {'7','.','.','.','2','.','.','.','6'},
            {'.','6','.','.','.','.','2','8','.'},
            {'.','.','.','4','1','9','.','.','5'},
            {'.','.','.','.','8','.','.','7','9'}
        };
        System.out.println(isValidSudoku1(b));

        char[][] bb = {{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};
        System.out.println(isValidSudoku1(bb));
    }
}
